// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using SyncfusionBlazorApp1.Models;

namespace SyncfusionBlazorApp1.Data;

public partial class UniversityDbContext : DbContext
{
    public UniversityDbContext()
    {
    }

    public UniversityDbContext(DbContextOptions<UniversityDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Building> Building { get; set; }

    public virtual DbSet<Campus> Campus { get; set; }

    public virtual DbSet<City> City { get; set; }

    public virtual DbSet<Country> Country { get; set; }

    public virtual DbSet<Course> Course { get; set; }

    public virtual DbSet<DegreeProgram> DegreeProgram { get; set; }

    public virtual DbSet<Designation> Designation { get; set; }

    public virtual DbSet<Faculty> Faculty { get; set; }

    public virtual DbSet<FeeMaster> FeeMaster { get; set; }

    public virtual DbSet<ProgramCourse> ProgramCourse { get; set; }

    public virtual DbSet<Room> Room { get; set; }

    public virtual DbSet<Semester> Semester { get; set; }

    public virtual DbSet<SemesterCourse> SemesterCourse { get; set; }

    public virtual DbSet<State> State { get; set; }

    public virtual DbSet<Student> Student { get; set; }

    public virtual DbSet<StudentSemesterCourse> StudentSemesterCourse { get; set; }

    public virtual DbSet<University> University { get; set; }

    public virtual DbSet<User> User { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Building>(entity =>
        {
            entity.Property(e => e.BuildingId).ValueGeneratedNever();
            entity.Property(e => e.BuildingName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.HasOne(d => d.Campus).WithMany(p => p.Building)
                .HasForeignKey(d => d.CampusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Building_Campus");
        });

        modelBuilder.Entity<Campus>(entity =>
        {
            entity.Property(e => e.CampusId).ValueGeneratedNever();
            entity.Property(e => e.CampusLogo)
                .IsRequired()
                .HasColumnType("image");
            entity.Property(e => e.StreetName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Website)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.City).WithMany(p => p.Campus)
                .HasForeignKey(d => d.CityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Campus_City");

            entity.HasOne(d => d.Country).WithMany(p => p.Campus)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Campus_Country");

            entity.HasOne(d => d.State).WithMany(p => p.Campus)
                .HasForeignKey(d => d.StateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Campus_State");

            entity.HasOne(d => d.University).WithMany(p => p.Campus)
                .HasForeignKey(d => d.UniversityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Campus_University");
        });

        modelBuilder.Entity<City>(entity =>
        {
            entity.Property(e => e.CityId).ValueGeneratedNever();
            entity.Property(e => e.CityName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.State).WithMany(p => p.City)
                .HasForeignKey(d => d.StateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_City_State");
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.Property(e => e.CountryId).ValueGeneratedNever();
            entity.Property(e => e.CountryName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Course>(entity =>
        {
            entity.Property(e => e.CourseId).ValueGeneratedNever();
            entity.Property(e => e.CourseName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DegreeProgram>(entity =>
        {
            entity.Property(e => e.DegreeProgramId).ValueGeneratedNever();
            entity.Property(e => e.DegreeProgramName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Campus).WithMany(p => p.DegreeProgram)
                .HasForeignKey(d => d.CampusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DegreeProgram_Campus");

            entity.HasOne(d => d.Faculty).WithMany(p => p.DegreeProgram)
                .HasForeignKey(d => d.FacultyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DegreeProgram_Faculty");
        });

        modelBuilder.Entity<Designation>(entity =>
        {
            entity.Property(e => e.DesignationId).ValueGeneratedNever();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Faculty>(entity =>
        {
            entity.Property(e => e.FacultyId).ValueGeneratedNever();
            entity.Property(e => e.DOB).HasColumnType("date");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StreetName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.City).WithMany(p => p.Faculty)
                .HasForeignKey(d => d.CityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Faculty_City");

            entity.HasOne(d => d.Country).WithMany(p => p.Faculty)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Faculty_Country");

            entity.HasOne(d => d.Designation).WithMany(p => p.Faculty)
                .HasForeignKey(d => d.DesignationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Faculty_Designation");

            entity.HasOne(d => d.State).WithMany(p => p.Faculty)
                .HasForeignKey(d => d.StateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Faculty_State");

            entity.HasOne(d => d.User).WithMany(p => p.Faculty)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Faculty_User");
        });

        modelBuilder.Entity<FeeMaster>(entity =>
        {
            entity.Property(e => e.FeeMasterId).ValueGeneratedNever();

            entity.HasOne(d => d.SemesterCourse).WithMany(p => p.FeeMaster)
                .HasForeignKey(d => d.SemesterCourseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FeeMaster_SemesterCourse");
        });

        modelBuilder.Entity<ProgramCourse>(entity =>
        {
            entity.Property(e => e.ProgramCourseId).ValueGeneratedNever();

            entity.HasOne(d => d.Course).WithMany(p => p.ProgramCourse)
                .HasForeignKey(d => d.CourseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProgramCourse_Course");

            entity.HasOne(d => d.Program).WithMany(p => p.ProgramCourse)
                .HasForeignKey(d => d.ProgramId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProgramCourse_DegreeProgram");
        });

        modelBuilder.Entity<Room>(entity =>
        {
            entity.Property(e => e.RoomId).ValueGeneratedNever();
            entity.Property(e => e.RoomName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.HasOne(d => d.Building).WithMany(p => p.Room)
                .HasForeignKey(d => d.BuildingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Room_Building");
        });

        modelBuilder.Entity<Semester>(entity =>
        {
            entity.Property(e => e.SemesterId).ValueGeneratedNever();
        });

        modelBuilder.Entity<SemesterCourse>(entity =>
        {
            entity.Property(e => e.SemesterCourseId).ValueGeneratedNever();

            entity.HasOne(d => d.Course).WithMany(p => p.SemesterCourse)
                .HasForeignKey(d => d.CourseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SemesterCourse_Course");

            entity.HasOne(d => d.Faculty).WithMany(p => p.SemesterCourse)
                .HasForeignKey(d => d.FacultyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SemesterCourse_Faculty");

            entity.HasOne(d => d.Room).WithMany(p => p.SemesterCourse)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SemesterCourse_Room");

            entity.HasOne(d => d.Semester).WithMany(p => p.SemesterCourse)
                .HasForeignKey(d => d.SemesterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SemesterCourse_Semester");
        });

        modelBuilder.Entity<State>(entity =>
        {
            entity.Property(e => e.StateId).ValueGeneratedNever();
            entity.Property(e => e.StateName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Country).WithMany(p => p.State)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_State_Country");
        });

        modelBuilder.Entity<Student>(entity =>
        {
            entity.Property(e => e.StudentId).ValueGeneratedNever();
            entity.Property(e => e.DOB).HasColumnType("date");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StreetName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.City).WithMany(p => p.Student)
                .HasForeignKey(d => d.CityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Student_City");

            entity.HasOne(d => d.Country).WithMany(p => p.Student)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Student_Country");

            entity.HasOne(d => d.Program).WithMany(p => p.Student)
                .HasForeignKey(d => d.ProgramId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Student_DegreeProgram");

            entity.HasOne(d => d.State).WithMany(p => p.Student)
                .HasForeignKey(d => d.StateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Student_State");

            entity.HasOne(d => d.User).WithMany(p => p.Student)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Student_User");
        });

        modelBuilder.Entity<StudentSemesterCourse>(entity =>
        {
            entity.Property(e => e.StudentSemesterCourseId).ValueGeneratedNever();

            entity.HasOne(d => d.SemesterCourse).WithMany(p => p.StudentSemesterCourse)
                .HasForeignKey(d => d.SemesterCourseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StudentSemesterCourse_SemesterCourse");

            entity.HasOne(d => d.Student).WithMany(p => p.StudentSemesterCourse)
                .HasForeignKey(d => d.StudentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StudentSemesterCourse_Student");
        });

        modelBuilder.Entity<University>(entity =>
        {
            entity.Property(e => e.UniversityId).ValueGeneratedNever();
            entity.Property(e => e.Logo)
                .IsRequired()
                .HasColumnType("image");
            entity.Property(e => e.StreetName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UniversityName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Website)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.City).WithMany(p => p.University)
                .HasForeignKey(d => d.CityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_University_City");

            entity.HasOne(d => d.Country).WithMany(p => p.University)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_University_Country");

            entity.HasOne(d => d.State).WithMany(p => p.University)
                .HasForeignKey(d => d.StateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_University_State");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.Property(e => e.UserId).ValueGeneratedNever();
            entity.Property(e => e.Mail)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}